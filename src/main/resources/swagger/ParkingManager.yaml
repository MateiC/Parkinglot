swagger: "2.0"
info:
  description: "This API provides all the interfaces required to interact with the Parking Lot Manager."
  version: "1.0.0"
  title: "Parking Lot Manager Swagger"
basePath: "/parkinglotmanager"
tags:
- name: "Parking lot manager"
  description: "Manage your parking lot"
- name: "Parking lot client"
  description: "Access the parking lot as a client"
schemes:
- "http"
paths:
  /parkinglots:
    get:
      tags:
        - "Parking lot manager"
      summary: "Fetch all the parking lots"
      operationId: "getAllParkingLots"
      produces:
        - "application/json"
      responses:
        '200':
          $ref: "#/responses/ParkingLots"
        '400':
          $ref: '#/responses/400'
        '500':
          $ref: '#/responses/500'        
  /parkinglot/{parkingLotCode}:
    get:
      tags:
      - "Parking lot manager"
      summary: "Fetch the parking lot by it's code"
      operationId: "getParkingLotByCode"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/ParkingLotCode"
      responses:
        '200':
          $ref: "#/responses/ParkingLot"
        '400':
          $ref: '#/responses/400'
        '404':
          $ref: '#/responses/404'
        '500':
          $ref: '#/responses/500'         
    post:
      tags:
      - "Parking lot manager"
      summary: "Creates a parking lot with the given data"
      operationId: "createparkinglot"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/ParkingLotCode"
      - $ref: "#/parameters/ParkingLotCreate"
      responses:
        '200':
          $ref: "#/responses/ParkingLotCreate"
        '400':
          $ref: '#/responses/400'
        '500':
          $ref: '#/responses/500'             
    put:
      tags:
      - "Parking lot manager"
      summary: "Updates a parking lot with the given data"
      operationId: "updateparkinglot"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/ParkingLotCode"
      - $ref: "#/parameters/ParkingLotUpdate"
      responses:
        '200':
          $ref: "#/responses/ParkingLotUpdate"
        '404':
          $ref: '#/responses/404'        
        '400':
          $ref: '#/responses/400'
        '500':
          $ref: '#/responses/500'                
    delete:
      tags:
      - "Parking lot manager"
      summary: "Deletes a a parking lot"
      operationId: "deleteParkingLot"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/ParkingLotCode"      
      - $ref: "#/parameters/Version"
      responses:
        '200':
          $ref: '#/responses/200'      
        '400':
          $ref: '#/responses/400'
        '404':
          $ref: '#/responses/404'
        '500':
          $ref: '#/responses/500'           
  /parkinglot/{parkingLotCode}/carParked/{carID}:
    post:
      tags:
      - "Parking lot client"
      summary: "Creates an entry in the parking lot for the given car"
      operationId: "createParkingLotEntry"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/ParkingLotCode"
      - $ref: "#/parameters/CarID"      
      - $ref: "#/parameters/CarType"
      responses:
        '200':
          $ref: "#/responses/ParkingLotEntry"
        '400':
          $ref: '#/responses/400'
        '500':
          $ref: '#/responses/500'          
    delete:
      tags:
      - "Parking lot client"
      summary: "Requests the exit of a car from the parking lot"
      operationId: "deleteParkingLotEntry"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/ParkingLotCode"
      - $ref: "#/parameters/CarID"
      responses:
        '200':
          $ref: "#/responses/ParkingLotExit" 
        '400':
          $ref: '#/responses/400'
        '404':
          $ref: '#/responses/404'
        '500':
          $ref: '#/responses/500'          
definitions:
  ParkingLotCode:
    title: ParkingLotCode
    type: "string"
    example: "NCE"
    minLength: 3
    maxLength: 3
    pattern: '[A-Z0-9]{3}'
  ParkingLotDescription:
    title: ParkingLotDescription
    type: "string"
    example: "Nice Centre"  
  ErrorType:
    title: ErrorType
    type: "object"
    properties:
       error:
          type: "string"
          description: Error description
          example: "Entity not found"
  ParkingLot:
    title: ParkingLot
    type: "object"
    properties:
      description:
        $ref: "#/definitions/ParkingLotDescription"
      numberOfStandardParkingSlots:
        type: "integer"
        format: "int32"
      numberOf20KWParkingSlots:
        type: "integer"
        format: "int32"
      numberOf50KWParkingSlots:
        type: "integer"
        format: "int32"
      pricingPolicy:
        $ref: "#/definitions/PricingPolicy"
      version:
        $ref: "#/definitions/Version"  
  ParkingLotsRS:
    title: ParkingLotsRS
    type: "array"
    items:
      type: "object"
      title: ParkingLots
      required:
      - description
      - code
      properties:
        description:
          $ref: "#/definitions/ParkingLotDescription"
        code:
          $ref: "#/definitions/ParkingLotCode"
  CarID:
    title: CarID  
    type: "string"
    minLength: 7
    maxLength: 7
    pattern: '[A-Z0-9]{7}'
    example: "BB123EQ"
    description: "ID of the car"
  PricingPolicy:
    title: PricingPolicy  
    type: "object"
    properties:
      policy:
        type: "string"
        description: "Pricing policy to be used"
        enum:
        - "perHour"
        - "perHourWithBasePrice"
      basePrice:   
         type: "number"
         format: "float"
      fixedAmmount:
         type: "number"
         format: "float"
  AssignedSlot:
    title: AssignedSlot  
    type: "string"
    example: "G10"
    description: "Code of the assigned slot"    
  Version:
    title: Version   
    type: "integer"
    format: "int32"
    description: "Version of the object in the database"
  CarType:
    title: CarType
    description: "Type of car to be used"
    type: "string"
    enum:
    - "gasoline"
    - "20kW"
    - "50kW"  
  ParkingLotCreate:
    title: ParkingLotCreate     
    allOf:
      - $ref: "#/definitions/ParkingLot"
      - type: "object"
        required:
          - description
          - numberOfStandardParkingSlots
          - numberOf20KWParkingSlots
          - numberOf50KWParkingSlots
          - pricingPolicy
  ParkingLotUpdate:
    title: ParkingLotUpdate  
    type: "object"
    required:
    - pricingPolicy
    - version
    properties:
      pricingPolicy:
        $ref: "#/definitions/PricingPolicy"
      version:
        $ref: "#/definitions/Version"        
  ParkingLotDelete:
    title: ParkingLotDelete
    type: "object"
    properties:
      version:
        $ref: "#/definitions/Version"    
  ParkingLotEntryRS:
    type: "object"
    required:
    - carID
    - assignedSlot
    - entryTime
    properties:
      carID:
        $ref: "#/definitions/CarID"
      assignedSlot:
       $ref: "#/definitions/AssignedSlot"
      entryTime:
        type: "string"
  ParkingLotExitRS:
    type: "object"
    required:
    - carID
    - assignedSlot
    - sumToPay
    properties:
      carID:
        $ref: "#/definitions/CarID"
      assignedSlot:
        $ref: "#/definitions/AssignedSlot"
      sumToPay:
        type: "number"
        format: "float"
        example: 32.5
parameters:
  ParkingLotCode:
    name: "parkingLotCode"
    in: "path"
    required: true
    description: "3 character parking lot code"
    type: "string"
    minLength: 3
    maxLength: 3
    pattern: '[A-Z0-9]{3}'     
  CarID:
    name: "carID"
    in: "path"
    required: true    
    description: "7 character car ID plate"
    type: "string"
    minLength: 7
    maxLength: 7
    pattern: '[A-Z0-9]{7}'
  ParkingLotCreate:
    in: "body"
    name: "ParkingLotCreate"
    description: "Parking lot model that needs to be added"
    required: true
    schema:
      $ref: "#/definitions/ParkingLotCreate"
  ParkingLotUpdate:
    in: "body"
    name: "ParkingLotUpdate"
    description: "Parking lot model that needs to be updated"
    required: true
    schema:
      $ref: "#/definitions/ParkingLotUpdate"
  ParkingLotDelete:
    in: "body"
    name: "ParkingLotDelete"
    description: "Parking lot model that needs to be deleted"
    required: true
    schema:
      $ref: "#/definitions/ParkingLotDelete"
  CarType:
    in: "query"
    name: "carType"
    description: "Type of car to be used"
    type: "string"
    enum:
    - "gasoline"
    - "20kW"
    - "50kW"
  Version:
    in: "query"
    name: "version"
    description: "Version of the object"
    required: true
    type: "integer"
    format: "int32"
responses:
  ParkingLots:
    description: "Retrieve all parking lots"
    schema:
      $ref: '#/definitions/ParkingLotsRS'
  ParkingLot:
    description: "Retrieve one parking lot"
    schema:
      $ref: '#/definitions/ParkingLot'
  ParkingLotCreate:
    description: "Create one parking lot"
    schema:
      $ref: '#/definitions/ParkingLotCreate'
  ParkingLotUpdate:
    description: "Update one parking lot"
    schema:
      $ref: '#/definitions/ParkingLotUpdate'      
  ParkingLotEntry:
    description: "Create one parking lot entry"
    schema:
      $ref: '#/definitions/ParkingLotEntryRS' 
  ParkingLotExit:
    description: "Delete one parking lot entry"
    schema:
      $ref: '#/definitions/ParkingLotExitRS'         
  ErrorResponse:
    description: "Error returned by the backend"
    schema:
      $ref: '#/definitions/ErrorType'    
  '200':
    description: "Successful operation"
  '400':
    description: "Bad Request"
    schema:
      $ref: '#/definitions/ErrorType'
  '404':
    description: "Resource Not found"
    schema:
      $ref: '#/definitions/ErrorType'    
  '500':
    description: "Unexpected error"
    schema:
      $ref: '#/definitions/ErrorType'